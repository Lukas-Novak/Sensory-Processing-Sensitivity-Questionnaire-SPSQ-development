# Crude effect
glm(cov_topics1_6  ~ std_SHSS, data = data.for.logreg, family=binomial(logit)) %>% odds.ratio(level = 0.95)  %>% round(digits = 2)
# adjusted effect
lr_cov_t_1_6 =glm(cov_topics1_6  ~ std_SHSS + economical_status + Gender + Age, data = data.for.logreg, family=binomial(logit))
lr_cov_t_1_6 %>% odds.ratio(level = 0.95)  %>% round(digits = 2)
(exp(lr_cov_t_1_6$coefficients[-1])-1)*100 # percentage
# 3.b model SHSS (Fear and anxiety)
# Crude effect
glm(cov_topics1_6  ~ std_SHSS.S, data = data.for.logreg, family=binomial(logit)) %>%  odds.ratio(level = 0.95)  %>% round(digits = 2)
# adjusted effect
glm(cov_topics1_6  ~ std_SHSS.S + economical_status + Gender + Age, data = data.for.logreg, family=binomial(logit)) %>% odds.ratio(level = 0.95) %>% round(digits = 2)
#...........................................................................................................................................................................
# 7.a model SHSS (Helplessness)
# Crude effect
glm(cov_topics1_7  ~ std_SHSS, data = data.for.logreg, family=binomial(logit)) %>%  odds.ratio(level = 0.95)  %>% round(digits = 2)
# adjusted effect
glm(cov_topics1_7  ~ std_SHSS + economical_status + Gender + Age, data = data.for.logreg, family=binomial(logit)) %>% odds.ratio(level = 0.95) %>% round(digits = 2)
# 3.b model SHSS (Helplessness)
# Crude effect
glm(cov_topics1_7  ~ std_SHSS.S, data = data.for.logreg, family=binomial(logit)) %>%  odds.ratio(level = 0.95)  %>% round(digits = 2)
# adjusted effect
glm(cov_topics1_7  ~ std_SHSS.S + economical_status + Gender + Age, data = data.for.logreg, family=binomial(logit)) %>% odds.ratio(level = 0.95) %>% round(digits = 2)
#...........................................................................................................................................................................
# 8.a model SHSS (Hope)
# Crude effect
glm(cov_topics1_8  ~ std_SHSS, data = data.for.logreg, family=binomial(logit)) %>%  odds.ratio(level = 0.95)  %>% round(digits = 2)
# adjusted effect
glm(cov_topics1_8  ~ std_SHSS + economical_status + Gender + Age, data = data.for.logreg, family=binomial(logit)) %>% odds.ratio(level = 0.95) %>% round(digits = 2)
# 3.b model SHSS (Hope)
# Crude effect
glm(cov_topics1_8  ~ std_SHSS.S, data = data.for.logreg, family=binomial(logit)) %>%  odds.ratio(level = 0.95)  %>% round(digits = 2)
# adjusted effect
glm(cov_topics1_8  ~ std_SHSS.S + economical_status + Gender + Age, data = data.for.logreg, family=binomial(logit)) %>% odds.ratio(level = 0.95) %>% round(digits = 2)
#...........................................................................................................................................................................
# 9.a model SHSS (Deteriorated structure of a day)
# Crude effect
glm(cov_topics1_9  ~ std_SHSS, data = data.for.logreg, family=binomial(logit)) %>%  odds.ratio(level = 0.95)  %>% round(digits = 2)
# adjusted effect
glm(cov_topics1_9  ~ std_SHSS + economical_status + Gender + Age, data = data.for.logreg, family=binomial(logit)) %>% odds.ratio(level = 0.95) %>% round(digits = 2)
# 3.b model SHSS (Deteriorated structure of a day)
# Crude effect
glm(cov_topics1_9  ~ std_SHSS.S, data = data.for.logreg, family=binomial(logit)) %>%  odds.ratio(level = 0.95)  %>% round(digits = 2)
# adjusted effect
glm(cov_topics1_9  ~ std_SHSS.S + economical_status + Gender + Age, data = data.for.logreg, family=binomial(logit)) %>% odds.ratio(level = 0.95) %>% round(digits = 2)
### testovací odpad
#######################################################xx
pokus = lm(SHSS ~ cov_topics1_9 + cov_topics1_8 + cov_topics1_7 + cov_topics1_6 + cov_topics1_5 +
cov_topics1_4 + cov_topics1_3 + cov_topics1_2 + cov_topics1_1, data = data.for.logreg)
pokus %>% summary
mlm1 <- lm(cbind(cov_topics1_9, cov_topics1_8, cov_topics1_7,
cov_topics1_5,cov_topics1_4,cov_topics1_3,cov_topics1_2,cov_topics1_1, cov_topics1_6) ~ std_SHSS.S + economical_status + Gender + Age , data = data.for.logreg)
mlm1 %>% summary
soc.dec.=data.work.actual[, c("Gender","family_status", "religious_attendance", "economical_status", "education", "faith")]
library(compareGroups)
resNoGroups <- compareGroups(~ ., data = soc.dec.)
restabNoGroups <- createTable(resNoGroups)
restabNoGroups
print(restabNoGroups, header.labels = c("all" = "Entire cohort"), which.table = "descr")
export2xls(x = restabNoGroups, header.labels = T, file = "restabNoGroups.xlsx") # excel table
library(finalfit)
# data preparation
explan.names=names(data.work.actual[, c("Gender","family_status", "religious_attendance", "economical_status", "education", "faith")])
explanatory = explan.names
dependent = "SHSS"
# descriptives with basic group differences
group.dif.empa=summary_factorlist(.data = data.work.actual ,dependent, explanatory, na_include = F, p=TRUE) # command which we add in our analysis: "p_cat = "aov"" must be off during knit function
write.csv(group.dif.empa, "Supplementary table prep.csv")
#Quartiles of SHSS score to copy to excel
quartiles.1=as.data.frame(do.call("rbind", tapply(data.work.actual$SHSS, data.work.actual[, c("Gender")], quantile, na.rm =T)))
quartiles.2=as.data.frame(do.call("rbind", tapply(data.work.actual$SHSS, data.work.actual[, c("family_status")], quantile, na.rm =T)))
quartiles.3=as.data.frame(do.call("rbind", tapply(data.work.actual$SHSS, data.work.actual[, c("religious_attendance")], quantile, na.rm =T)))
quartiles.5=as.data.frame(do.call("rbind", tapply(data.work.actual$SHSS, data.work.actual[, c("economical_status")], quantile, na.rm =T)))
quartiles.4=as.data.frame(do.call("rbind", tapply(data.work.actual$SHSS, data.work.actual[, c("education")], quantile, na.rm =T)))
quartiles.6=as.data.frame(do.call("rbind", tapply(data.work.actual$SHSS, data.work.actual[, c("faith")], quantile, na.rm =T)))
quart.total=rbind(quartiles.1,quartiles.2,quartiles.3,quartiles.4,quartiles.5,quartiles.6, na.rm =T)
quart.total=quart.total[, -c(1,3,5)]
quart.total # just to check
rownames(quart.total) <- c()
quart=quart.total %>% round(digits = 2)# for copy to excel
quart=quart[-c(22),]
quart.export=cbind(group.dif.empa,quart)
write.csv2(file = "quart.export.csv", x = quart.export)
#........................................................................
# Family status group comparison
# anova to confirm group differences suggested by compareGroups package:
aov(data.work.actual$SHSS ~ data.work.actual$economical_status + data.work.actual$education + data.work.actual$faith + data.work.actual$family_status +  data.work.actual$religious_attendance) %>% summary
# There were furthre evaluated only differences, which were significant in this firtst anova
# normality not assumed
leveneTest(as.numeric(data.work.actual$SHSS) ~ data.work.actual$religious_attendance, data = data.work.actual, center = mean)
# equal variances not assumed thus: Games–Howell pairwise comparison test
library(userfriendlyscience)
post.h=posthocTGH(y = data.work.actual$SHSS, data.work.actual$education,  method = "games-howell", p.adjust = "bonferroni", digits = 4)
post.h %>% print
# dunn.test
dunn.test(as.numeric(data.work.actual$SHSS), data.work.actual$Gender, list = T, altp = T, method = "bonferroni", kw=T, label = T, table = T)
# effect size
library(rcompanion)
multiVDA(x = as.numeric(data.work.actual$SHSS),
g = data.work.actual$Gender, statistic = "VDA", digits = 3)
library(ggplot2)
ggplot(data.work.actual, aes(y=SHSS, x=family_status, fill=family_status)) + geom_boxplot() +  theme_bw()
ggbetweenstats(x = family_status, y = SHSS, ylab = "SHSS raw score", messages = T, data = data.work.actual, pairwise.comparisons = TRUE, pairwise.annotation = "p.value", p.adjust.method = "bonferroni", effsize.type = "unbiased")
library(ggplot2)
ggplot(data.work.actual, aes(x = family_status, y = SHSS, group = family_status)) +
stat_summary(fun.y = mean, na.rm = T, geom="point", color="blue") +
stat_summary(fun.data = mean_cl_normal, geom = "errorbar",
fun.args = list(conf.int=.95), size = 0.6, width = 0.5) +
theme_bw()
#mean_se
#  confirm group differences suggested by compareGroups package:
# ROBUST ANOVA
#_______________________________________________________________________________________
# From some reason, the following command did not worked, thus 3x two way was conducted
# t3way(SHSS ~ Gender + faith + education,  data = data.work.actual)
# First
WRS2::t2way(SHSS ~ Gender + education,  data = data.work.actual)
# Second
WRS2::t2way(SHSS ~ faith + education,  data = data.work.actual)
# third
WRS2::t2way(SHSS ~ faith + family_status,  data = data.work.actual)
#_____________________________________________________________________________________
# Non - parametric TESTING
krus.gen=kruskal.test(SHSS ~ Gender, data = data.work.actual)
krus.gen
krus.faith=kruskal.test(SHSS ~ Gender, data = data.work.actual)
krus.faith
# it was confirmed that variables: Faith and Gender did have an effect on the SHSS score
# POST-HOC COMPARISOM
#________________________________________________________________________________________
# ASSUMPTIONS
#__________________________________________________
shapiro.test(data.work.actual$SHSS)
# normality not assumed
leveneTest(as.numeric(data.work.actual$SHSS) ~ data.work.actual$faith, data = data.work.actual, center = median)
# equal variances ASSUMED --> Games–Howell pairwise comparison test NO NEEDED; thus Dunn test was performed
# POST-HOC TESTING
#_______________________________________________________________________
# variable: FAITH
dun.faith=dunn.test(data.work.actual$SHSS, data.work.actual$faith, list = T, altp = T, method = "bonferroni", kw=T, label = T, table = T)
# variable: EDUCATION
krus.edu=kruskal.test(SHSS ~ education, data = data.work.actual)
dun.edu=posthocTGH(y = data.work.actual$SHSS, data.work.actual$education,  method = "games-howell", p.adjust = "bonferroni", digits = 4)
# in the dun.test, there is need to add values into the test by colum number e.g. [1]; there is no other way
# effect size
#____________________________________
# Faith
#______________________________________________
library(rcompanion)
VDA.faith=multiVDA(x = as.numeric(data.work.actual$SHSS),
g = data.work.actual$faith, statistic = "VDA", digits = 3) %>%
as.data.frame() %>%
mutate(VDA = as.numeric(pairs.VDA))
# Non-religious VS Yes, but I am not a member of church/rel.society
VDA.faith.nr.vs.rel.nch = VDA.faith %>%
filter(pairs.Comparison == "Non-religious - Yes, but I am not a member of church/rel.society") %>%
select(VDA) %>%
as.matrix()
# Yes, I am a member or church/rel.society
VDA.faith.nr.vs.rel = VDA.faith %>%
filter(pairs.Comparison == "Non-religious - Yes, I am a member or church/rel.society") %>%
select(VDA) %>%
as.matrix()
#____________________________________
# Education
#______________________________________________
VDA.edu=multiVDA(x = data.work.actual$SHSS,
g = data.work.actual$education, statistic = "VDA", digits = 3) %>%
as.data.frame() %>%
mutate(VDA = as.numeric(pairs.VDA))
# Higher vocational school or University bachelor-Vocational school or non - maturity high school
VDA.edu.voc.vs.bc.or.high.voc = VDA.edu %>%
filter(pairs.Comparison == "Vocational school or non - maturity high school - Higher vocational school or University bachelor") %>%
select(VDA) %>%
as.matrix()
#____________________________________
# Gender
#______________________________________________
VDA.gen=multiVDA(x = data.work.actual$SHSS,
g = data.work.actual$Gender, statistic = "VDA", digits = 3) %>%
as.data.frame() %>%
mutate(VDA = as.numeric(pairs.VDA))
data.work.actual = data.work.actual %>%
mutate(Religious_status = recode_factor(faith,
"Non-religious"="Non-religious",
"Yes, but I am not a member of church/rel.society"="Religious",
"No, I am convinced atheist"="Non-religious",
"Yes, I am a member or church/rel.society"="Religious"))
# Grapthics
#______________________________________________________________________
# First option
#___________________________
ggbetweenstats(x = faith, y = SHSS, ylab = "SHSS score", messages = T, data = data.work.actual, pairwise.comparisons = TRUE, pairwise.annotation = "p.value", p.adjust.method = "bonferroni", effsize.type = "unbiased")
ggbetweenstats(x = Religious_status, y = SHSS, ylab = "SHSS score", messages = T, data = data.work.actual, pairwise.comparisons = TRUE, pairwise.annotation = "p.value", p.adjust.method = "bonferroni", effsize.type = "unbiased")
wilcox.test(SHSS ~ Religious_status, data = data.work.actual)
wilcox_effsize(SHSS ~ Religious_status, data = data.work.actual,p.adjust.method = "bonferroni")
wilcox_test(SHSS ~ Religious_status, data = data.work.actual)
# Second option
#___________________________
# ggplot(data.work.actual, aes(y=SHSS, x=faith, fill=faith)) + geom_boxplot() +  theme_bw()
# Third option
#___________________________
# ggplot(data.work.actual, aes(x = faith, y = SHSS, group = faith)) +
#    stat_summary(fun.y = mean, na.rm = T, geom="point", color="blue") +
#    stat_summary(fun.data = mean_cl_normal, geom = "errorbar",
#                 fun.args = list(conf.int=.95), size = 0.6, width = 0.5) +
#         theme_bw()
#mean_se
#Dunn test indicated higher SHSS score compared to employed, however, when alpha levels of this test (p = 0.0179) was compared with adjusted alpha level i.e. 0.05/6 = 0.008 it become non significant.
#Group differences in Family status and Religious attendance were not significantly lower than seted treshold (0.008).
meas.invar.spsq= "SS =~ SPSQ_1_S + SPSQ_2_S + SPSQ_3_S + SPSQ_4_S + SPSQ_5_S + SPSQ_6_S + SPSQ_7_S + SPSQ_8_S
meas.invar.spsq= "SS =~ SPSQ_1_S + SPSQ_2_S + SPSQ_3_S + SPSQ_4_S + SPSQ_5_S + SPSQ_6_S + SPSQ_7_S + SPSQ_8_S
meas.invar.spsq= "SS =~ SPSQ_1_S + SPSQ_2_S + SPSQ_3_S + SPSQ_4_S + SPSQ_5_S + SPSQ_6_S + SPSQ_7_S + SPSQ_8_S
OS =~ SPSQ_1_O + SPSQ_2_O + SPSQ_3_O + SPSQ_4_O + SPSQ_5_O + SPSQ_6_O + SPSQ_7_O + SPSQ_8_O
GS =~ SPSQ_1_S + SPSQ_2_S + SPSQ_3_S + SPSQ_4_S + SPSQ_5_S + SPSQ_6_S + SPSQ_7_S + SPSQ_8_S + SPSQ_1_O + SPSQ_2_O + SPSQ_3_O + SPSQ_4_O + SPSQ_5_O + SPSQ_6_O + SPSQ_7_O + SPSQ_8_O"
meas.invar.spsq.cfa=cfa(meas.invar.spsq, data = data.work.actual,ordered = T,std.lv=T,
meanstructure = T) # crucial in invariance testing
data.work.actual %>% nrow()
data.work.actual %>% drop_na()
data.work.actual %>% drop_na() %>% nrow()
data.work.actual %>% group_by(starts_with("SPSQ"))
data.work.actual %>% select(starts_with("SPSQ_"))
data.work.actual %>% select(starts_with("SHSS_"))
data.work.actual %>% rename_all(~"SHSS", "SPSQ") select(starts_with("SPSQ_"))
data.work.actual %>% rename_all(~"SHSS", "SPSQ")
data.work.actual %>% rename_all("SHSS", "SPSQ")
data.work.actual %>% rename_all(~("SHSS", "SPSQ") )
data.work.actual %>% rename_all(~("SHSS""SPSQ"))
data.work.actual %>% rename_with( ~str_replace(., "SHSS", "SPSQ" ))
data.work.actual %>% rename_with( ~str_replace(., "SHSS", "SPSQ")) %>% select(starts_with("SPSQ"))
data.work.actual = data.work.actual %>%
rename_with( ~str_replace(., "SHSS", "SPSQ"))
meas.invar.spsq= "SS =~ SPSQ_1_S + SPSQ_2_S + SPSQ_3_S + SPSQ_4_S + SPSQ_5_S + SPSQ_6_S + SPSQ_7_S + SPSQ_8_S
meas.invar.spsq.cfa=cfa(meas.invar.spsq, data = data.work.actual,ordered = T,std.lv=T,
meanstructure = T) # crucial in invariance testing
meas.invar.spsq.cfa=cfa(meas.invar.spsq, data = data.work.actual,ordered = T,std.lv=T,
meanstructure = T) # crucial in invariance testing
data.work.actual = data.work.actual %>%
rename_with( ~str_replace(., "SHSS", "SPSQ")) %>%
rename_with( ~str_replace(., "_E", "_O"))
meas.invar.spsq.cfa=cfa(meas.invar.spsq, data = data.work.actual,ordered = T,std.lv=T,
meanstructure = T) # crucial in invariance testing
meas.invar.spsq.cfa=cfa(meas.invar.spsq, data = data.work.actual,ordered = T,std.lv=T,
meanstructure = T) # crucial in invariance testing
meas.invar.spsq.cfa=cfa(meas.invar.spsq, data = data.work.actual,ordered = T,std.lv=T,
meanstructure = T) # crucial in invariance testing
# Tab x
tab.fit = matrix(nrow = 7, ncol = 10)
colnames(tab.fit)=c("Model","x2","df","pvalue","CFI","TLI","rmsea","rmsea.ci.lower", "rmsea.ci.upper", "SRMR")
tab.fit[1, ] = c("Overall model", round(fitMeasures(meas.invar.spsq.cfa,
c('chisq', 'df', 'pvalue',
'cfi',"tli",'rmsea',"rmsea.ci.lower",
"rmsea.ci.upper", 'srmr')), digits = 3))
data.invar = data %>%
drop_na(spsq)
data.invar = data.work.actual %>%
drop_na(SPSQ)
mult.group.m = eqMI.main(model = meas.invar.spsq,
data = data.invar,
group = "Gender",
meanstructure = T,
output = "both",
equivalence.test = T,
adjRMSEA = T,
projection = T,
ordered = T)
library(semTools)
mult.group.m = eqMI.main(model = meas.invar.spsq,
data = data.invar,
group = "Gender",
meanstructure = T,
output = "both",
equivalence.test = T,
adjRMSEA = T,
projection = T,
ordered = T)
library(equaltestMI)
mult.group.m = eqMI.main(model = meas.invar.spsq,
data = data.invar,
group = "Gender",
meanstructure = T,
output = "both",
equivalence.test = T,
adjRMSEA = T,
projection = T,
ordered = T)
mult.group.m = eqMI.main(model = meas.invar.spsq,
data = data.invar,
group = "Gender",
meanstructure = T,
output = "both",
equivalence.test = T,
adjRMSEA = T,
projection = T,
ordered = T)
# male table
tab.fit[2, ] = c("Male model", round(fitMeasures(mult.group.m$convention.sem$LavaanOut$fit.configural.g1,
c('chisq', 'df', 'pvalue',
'cfi',"tli",'rmsea',"rmsea.ci.lower",
"rmsea.ci.upper", 'srmr')), digits = 3))
mult.group.m
mult.group.m = eqMI.main(model = meas.invar.spsq,
data = data.invar,
group = "Gender",
meanstructure = T,
output = "both",
equivalence.test = T,
adjRMSEA = T,
projection = T)
# male table
tab.fit[2, ] = c("Male model", round(fitMeasures(mult.group.m$convention.sem$LavaanOut$fit.configural.g1,
c('chisq', 'df', 'pvalue',
'cfi',"tli",'rmsea',"rmsea.ci.lower",
"rmsea.ci.upper", 'srmr')), digits = 3))
# female table
tab.fit[3, ] = c("Female model", round(fitMeasures(mult.group.m$convention.sem$LavaanOut$fit.configural.g2,
c('chisq', 'df', 'pvalue',
'cfi',"tli",'rmsea',"rmsea.ci.lower",
"rmsea.ci.upper", 'srmr')), digits = 3))
# Metric invariance
tab.fit[5, ] = c("Metric  model", round(fitMeasures(mult.group.m$convention.sem$LavaanOut$fit.metric,
c('chisq', 'df', 'pvalue',
'cfi',"tli",'rmsea',"rmsea.ci.lower",
"rmsea.ci.upper", 'srmr')), digits = 3))
# Scalar invariance
tab.fit[6, ] = c("Scalar  model", round(fitMeasures(mult.group.m$convention.sem$LavaanOut$fit.scalar,
c('chisq', 'df', 'pvalue',
'cfi',"tli",'rmsea',"rmsea.ci.lower",
"rmsea.ci.upper", 'srmr')), digits = 3))
# Strict (error) invariance
tab.fit[7, ] = c("Strict  model", round(fitMeasures(mult.group.m$convention.sem$LavaanOut$fit.strict.residuals,
c('chisq', 'df', 'pvalue',
'cfi',"tli",'rmsea',"rmsea.ci.lower",
"rmsea.ci.upper", 'srmr')), digits = 3))
mult.group.m$eqMI.stat # checking chi-square
tab.fit = tab.fit %>%
as_tibble() %>%
mutate(pvalue = as.numeric(pvalue)) %>%
mutate(pvalue = format_p(pvalue)) %>%
mutate(rmsea = paste0(rmsea," 90% CI (",rmsea.ci.lower,"-",rmsea.ci.upper,")")) %>%
select(!starts_with(c("rmsea.ci.","rmsea.ci.lower","rmsea.ci.upper"))) %>% view()
tab.fit
meas.invar.spsq
data.work.actual %>% select(starts_with("SPSQ")) %>% names() %>% dput
mult.group.m = eqMI.main(model = meas.invar.spsq,
data = data.invar,
group = "Gender",
meanstructure = T,
output = "both",
equivalence.test = T,
adjRMSEA = T,
projection = T, ordered = T)
mult.group.m = eqMI.main(model = meas.invar.spsq,
data = data.invar,
group = "Gender",
meanstructure = T,
ordered = T)
mult.group.m = eqMI.main(model = meas.invar.spsq,
data = data.invar,
group = "Gender",
meanstructure = T,
output = "both",
equivalence.test = T,
adjRMSEA = T,
projection = T,
estimator = "WLSMV")
mult.group.m = eqMI.main(model = meas.invar.spsq,
data = data.invar,
group = "Gender",
meanstructure = T,
output = "both",
equivalence.test = T,
adjRMSEA = T,
projection = T,
estimator = "DWLS")
mult.group.m = eqMI.main(model = meas.invar.spsq,
data = data.invar,
group = "Gender",
meanstructure = T,
output = "both",
equivalence.test = T,
adjRMSEA = T,
projection = T,
estimator = "WLSMV")
mult.group.m = eqMI.main(model = meas.invar.spsq,
data = data.invar,
group = "Gender",
meanstructure = T,
output = "both",
equivalence.test = T,
adjRMSEA = T,
projection = T,
estimator = "ML")
mult.group.m = eqMI.main(model = meas.invar.spsq,
data = data.invar,
group = "Gender",
meanstructure = T,
output = "both",
equivalence.test = T,
adjRMSEA = T,
projection = T,
estimator = "MLR")
# male table
tab.fit[2, ] = c("Male model", round(fitMeasures(mult.group.m$convention.sem$LavaanOut$fit.configural.g1,
c('chisq', 'df', 'pvalue',
'cfi',"tli",'rmsea',"rmsea.ci.lower",
"rmsea.ci.upper", 'srmr')), digits = 3))
# Configure invariance
tab.fit[4, ] = c("Configural  model", round(fitMeasures(mult.group.m$convention.sem$LavaanOut$fit.combine.groups,
c('chisq', 'df', 'pvalue',
'cfi',"tli",'rmsea',"rmsea.ci.lower",
"rmsea.ci.upper", 'srmr')), digits = 3))
# Scalar invariance
tab.fit[6, ] = c("Scalar  model", round(fitMeasures(mult.group.m$convention.sem$LavaanOut$fit.scalar,
c('chisq', 'df', 'pvalue',
'cfi',"tli",'rmsea',"rmsea.ci.lower",
"rmsea.ci.upper", 'srmr')), digits = 3))
# Strict (error) invariance
tab.fit[7, ] = c("Strict  model", round(fitMeasures(mult.group.m$convention.sem$LavaanOut$fit.strict.residuals,
c('chisq', 'df', 'pvalue',
'cfi',"tli",'rmsea',"rmsea.ci.lower",
"rmsea.ci.upper", 'srmr')), digits = 3))
tab.fit
tab.fit = tab.fit %>%
as_tibble() %>%
mutate(pvalue = as.numeric(pvalue)) %>%
mutate(pvalue = format_p(pvalue)) %>%
mutate(rmsea = paste0(rmsea," 90% CI (",rmsea.ci.lower,"-",rmsea.ci.upper,")")) %>%
select(!starts_with(c("rmsea.ci.","rmsea.ci.lower","rmsea.ci.upper"))) %>% view()
tab.fit = tab.fit %>%
as_tibble() %>%
mutate(pvalue = as.numeric(pvalue)) %>%
mutate(pvalue = format_p(pvalue)) %>%
mutate(rmsea = paste0(rmsea," 90% CI (",rmsea.ci.lower,"-",rmsea.ci.upper,")")) %>%
select(!starts_with(c("rmsea.ci.","rmsea.ci.lower","rmsea.ci.upper")))
tab.fit
# This function will calculate difference in CFI and report difference if exist
cfi.dif = function(x) {
if(!is.data.frame(x)) stop('x must be a data frame')
if(length(x) < 1) stop('must be higher length than 1')
if(!sum(str_detect(names(x),"CFI"))) stop("There must be a column with CFI values")
x = x %>%
tibble("CFI.dif" = c(NA, round(diff(as.numeric(x$CFI)),digits = 3))) %>%
relocate("CFI.dif", .after = "CFI") %>%
mutate("mod.dif" = ifelse(CFI.dif > 0.01, "Yes", "No")) %>%
rename("CFI difference" = "CFI.dif",
"Model difference" = "mod.dif")
print(x)
}
tab.fit %>%
cfi.dif()
tab.fit %>%
cfi.dif()
0.994 - 0.919
0.994 - 0.919 > 0.01
0.933 - 0.919 > 0.01
0.933 - 928 > 0.01
0.933 - 0.928 > 0.01
0.933 - 0.928 > 0.0100
0.933 - 0.928 > 0.01
0.933 - 0.928
0.933 - 0.919
# creating table
library(huxtable)
tab.fit
tab.fit %>%
cfi.dif()
knitr::opts_chunk$set(
message = FALSE,
warning = FALSE,
include = FALSE
)
# pozor! je třeba být opatrný na bibliografii!!! a ne ji pouze slepě převzít z default settingu
# zatím to podle dosavadních zjištění vypadá tak, že je třeba bibliografii vždy vytvořit novou
# aby nedošlo k tomu, že se na konci dokumentu v referencích objeví i zdroje(např citované balíčky)
# které nebyly vůbec v markdownu použity !!!!
# to make analysis reproducible----------------------
#library(checkpoint)
#dir.create(file.path(tempdir(), ".checkpoint"), recursive = TRUE, showWarnings = FALSE)
#checkpoint("2020-06-23", checkpointLocation = tempdir(), scanForPackages = T, use.knitr = T, auto.install.knitr = T)
#-----------------------------------------------------
# library(papaja)
# library(foreign)
# library(dplyr)
# library(knitr)
# library(psych)
# library(MVN)
# library(MBESS)
# library(MissMech)
# library(Routliers)
# library(mice)
# library(userfriendlyscience)
# library(citr)
# library(lavaan)
# load packages and set seed
x=c("psych","dplyr","lavaan","car","papaja","userfriendlyscience","base","foreign","citr","Routliers","MVN","parameters", "EFA.MRFA","RGenData","semPlot","psycho","apa","corx","effectsize","qwraps2","finalfit","ggstatsplot","dunn.test","insight","rstatix")
set.seed(626461321)
lapply(x, require, character.only = TRUE)
tab.fit = tab.fit %>%
as_tibble() %>%
mutate(pvalue = as.numeric(pvalue)) %>%
mutate(pvalue = format_p(pvalue)) %>%
mutate(rmsea = paste0(rmsea," 90% CI (",rmsea.ci.lower,"-",rmsea.ci.upper,")")) %>%
select(!starts_with(c("rmsea.ci.","rmsea.ci.lower","rmsea.ci.upper")))
tab.fit %>%
as_tibble() %>%
mutate_all(~(replace(., is.na(.), ""))) %>%
as_huxtable(add_colnames = F) %>%
apa_table(col.names=c("Model","x2","df","p-value","CFI","TLI","RMSEA","SRMR"),
caption = "Measurement eqivalence of the spsq between genders",
note = "x2 = chi-square, df = degrees of freedom, CFI = Comparative Fit Index, TLI = Tucker-Lewis index, RMSEA = Root Mean Square Error of Approximation, SRMR = Standardized Root Mean Square Residual, CI = confidence interval")
tab.fit
openxlsx::write.xlsx(tab.fit, "tab.fit.xlsx")
